@page "/counter"
@page "/counter/{Stack:int}"
@inject ICounterState CounterState
@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@using Hara.Abstractions.Contracts
@using Hara.UI.Services
@implements IDisposable
<ion-content class="ion-padding">
    <p>Current count: @CounterState.CurrentCount</p>
    <p>Stack: @Stack</p>

    <ion-button @onclick="CounterState.IncrementCount" expand="block">Increase Counter</ion-button>
    <ion-button @onclick="GoForward" expand="block">Forward</ion-button>
</ion-content>

@code {

    [Parameter]
    public int? Stack { get; set; } = 0;
    
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        Stack ??= 0;
    }
    protected override void OnInitialized()
    {
        UiStateService.Title = "Counter";
        CounterState.StateChanged += StateHasChanged;
    }

    public void Dispose()
    {
        CounterState.StateChanged -= StateHasChanged;
    }

    private void GoForward()
    {
        
        UiStateService.PushStackState(AddToStack(Stack.Value));
        
        NavigationManager.NavigateTo($"counter/{Stack+1}");
        
    }

    private Func<Task> AddToStack(int i)
    {
        return async () =>
        {
            await JsRuntime.InvokeVoidAsync("dispatchEventWrapper", "back");

            NavigationManager.NavigateTo($"counter/{i}");
        };
    }

}