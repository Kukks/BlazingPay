@using Hara.Abstractions.Contracts
@inject IConfigProvider _configProvider
@inject ISecureConfigProvider _secureConfigProvider

@if (loading)
{
    <ion-progress-bar type="indeterminate"></ion-progress-bar>
    for (int i = 0; i < 2; i++)
    {
        <ion-item>
            <ion-thumbnail slot="start">
                <ion-skeleton-text></ion-skeleton-text>
            </ion-thumbnail>
            <ion-label>
                <h3>
                    <ion-skeleton-text animated style="width: 80%"></ion-skeleton-text>
                </h3>
                <p>
                    <ion-skeleton-text animated style="width: 60%"></ion-skeleton-text>
                </p>
                <p>
                    <ion-skeleton-text animated style="width: 30%"></ion-skeleton-text>
                </p>
            </ion-label>
        </ion-item>
    }
}
<ion-list>
    @for (int i = 0; i < Items.Count; i++)
    {
        var item = Items.ElementAt(i);
        <ion-item-sliding>
            <IonItem>
                <ion-label>@item.Key</ion-label>
                <ionI type="text" value="@item.Value" @onchange="args => UpdateItem(item.Key, (string) args.Value)"> </ionI>
            </IonItem>
            <ion-item-options side="end">
                <ion-item-option @onclick="() => RemoveItem(item.Key)">Remove</ion-item-option>
            </ion-item-options>
        </ion-item-sliding>
    }

    <IonItem>
        <IonInput type="text" @bind-Value="@newKey" placeholder="Key"> </IonInput>
        <IonInput type="text" @bind-Value="@newValue" placeholder="value" > </IonInput>
        <ion-button @onclick="AddItem" class="btn btn-primary">Add</ion-button>
    </IonItem>
</ion-list>

@code {

    IConfigProvider ConfigProvider
    {
        get
        {
            if (Encrypted)
            {
                return _secureConfigProvider ?? _configProvider;
            }
            return _configProvider;
        }
    }

    private bool loading = true;
    private string newKey = "";
    private string newValue = "";

    [Parameter]
    public bool Encrypted { get; set; }

    private Dictionary<string, string> Items { get; set; } = new Dictionary<string, string>();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var keys = await ConfigProvider.Get<string[]>("settings");
            if (keys != null)
            {
                foreach (var key in keys)
                {
                    Items.Add(key, await ConfigProvider.Get<string>(key));
                }
            }
            loading = false;
            StateHasChanged();
        }
        await base.OnInitializedAsync();
    }

    private async Task UpdateItem(string key, string value)
    {
        await ConfigProvider.Set(key, value);
    }

    private async Task RemoveItem(string key)
    {
        Items.Remove(key);
        await ConfigProvider.Set("settings", Items.Keys.ToArray());
        await ConfigProvider.Set<string>(key, null);
    }

    private async Task AddItem()
    {
        if (!string.IsNullOrEmpty(newKey) && !string.IsNullOrEmpty(newValue) && !Items.ContainsKey(newKey))
        {
            await ConfigProvider.Set("settings", Items.Keys.ToArray().Concat(new[] {newKey}));
            await ConfigProvider.Set(newKey, newValue);

            Items.Add(newKey, newValue);
            newKey = "";
            newValue = "";
        }
    }

}