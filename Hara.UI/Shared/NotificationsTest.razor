@using Hara.Abstractions.Contracts
@inject INotificationManager NotificationManager
<h3>Notifications Test</h3>
Notifications initialized = @Init 
@if (!NotificationManager.Initialized)
{
    <button @onclick="NotificationManager.Initialize" type="button" class="btn btn-primary">set up</button>
}
else
{
    <button @onclick="SendNotification" class="btn btn-primary" type="button">Send Notification</button>
    <ul class="list-group">
        @foreach (var i in Received)
        {
            <li  class="list-group-item">@i.Title : @i.Message</li>
        }
    </ul>
}

@code {

    public bool Init { get; set; }
    public List<NotificationEventArgs> Received = new List<NotificationEventArgs>();
    protected override Task OnInitializedAsync()
    {
        NotificationManager.NotificationReceived += (sender, args) => Received.Add(args);
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            Init = await NotificationManager.Initialize();
        }
    }
    
    private async Task SendNotification()
    {
        await NotificationManager.ScheduleNotification("test", "test body");
    }

}