@inherits BlazorTransitionableRoute.TransitionableLayoutComponent
@using BlazingPay.UI.Services
@using BlazingPay.Abstractions.Models
@implements IDisposable
@inject UIStateService StateService
@inject StackService StackService
@inject UIPreferencesAccessor UIPreferencesAccessor
<IonSplitPane when="sm" content-id="main-content" disabled="@StackService.AnyStackState">
    @if (!StackService.AnyStackState)
    {
        <IonMenu content-id="main-content">
            <NavMenu/>
        </IonMenu>
    }
    <IonPage class="ion-page" id="main-content">
        <IonHeader>
            <IonToolbar>
                <IonButtons slot="start">
                    @if (StackService.AnyStackState)
                    {
                        <IonBackButton @onclick="() => StackService.InvokeStackState()"  default-href="lol"></IonBackButton>
                    }
                    else
                    {
                        <IonMenuButton></IonMenuButton>
                    }
                </IonButtons>
                <IonButtons slot="end">
                    <IonButton href="http://blazor.net" target="_blank">About</IonButton>
                </IonButtons>
                <IonTitle>@StateService.Title</IonTitle>
            </IonToolbar>
        </IonHeader>
        @Body
    </IonPage>
</IonSplitPane>

@code{

    protected override void OnInitialized()
    {
        base.OnInitialized();
        StateService.StateChanged += StateChangedAsync;
        StackService.StackStateChanged += StateChangedAsync;
        UIPreferencesAccessor.StateChanged += StateChangedAsync;
    }

    public void Dispose()
    {
        StateService.StateChanged -= StateChangedAsync;
        StackService.StackStateChanged -= StateChangedAsync;
        UIPreferencesAccessor.StateChanged -= StateChangedAsync;
    }

    private async void StateChangedAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

}